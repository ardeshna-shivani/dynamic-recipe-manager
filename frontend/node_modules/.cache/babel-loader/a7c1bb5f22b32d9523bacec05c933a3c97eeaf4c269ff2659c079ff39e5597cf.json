{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Shivani\\\\react recipe-project\\\\recipe-manager\\\\frontend\\\\src\\\\Components\\\\RecipeForm.jsx\",\n  _s = $RefreshSig$();\n// import React, { useContext, useState } from 'react';\n// import { useNavigate, useParams } from 'react-router-dom';\n// import { AuthContext } from '../utils/Auth';\n\n// const RecipeForm = () => {\n//   const { id } = useParams();//url ne ander thi dynamic value.\n//   const navigate = useNavigate();\n//   const { user } = useContext(AuthContext);\n\n//   const recipes = JSON.parse(localStorage.getItem('recipes')) || [];\n//   // Retrieve initial data for editing (if any)\n//   const initialData = id ? recipes.find((r) => r.id.toString() === id) : {};\n//   //console.log(\"initialData: \",initialData);//recipe obj\n//   //const id = \"102\" url thi \n//   // const recipes = [{ id: 101, name: \"Pasta\" },{ id: 102, name: \"Pizza\" },{ id: 103, name: \"Burger\" }];\n//   //find r.id \"102\" === \"102\" = initialdata ma update thay \n//   const parseTime = (timeStr) => {\n//     const parts = timeStr ? timeStr.split(':') : [];\n//     // console.log(\"parts: \",parts);['2', '14']  \n//     const hours = parts[0] && !isNaN(parts[0]) ? parseInt(parts[0]) : 0;\n//     //console.log(\"hours: \",hours); //parts[0] - \"2\" \n//     const minutes = parts[1] && !isNaN(parts[1]) ? parseInt(parts[1]) : 0;\n//     // console.log(\"minutes: \",minutes);   //parts[1] - \"30\"\n//     return { hours, minutes };\n//   };\n\n//   // Parse the time into hours and minutes\n//   const { hours: initialHours, minutes: initialMinutes } = parseTime(initialData?.time);\n//   // console.log(\"parseTime\",parseTime(initialData?.time)); {}\n\n//   // State hooks for form inputs\n//   const [name, setName] = useState(initialData?.name || \"\");\n//   const [cuisine, setCuisine] = useState(initialData?.cuisine || \"\");\n//   const [instructions, setInstructions] = useState(initialData?.instructions || \"\");\n\n//   // Ensure that hours and minutes are initialized with valid values\n//   const [hours, setHours] = useState(initialHours);\n//   const [minutes, setMinutes] = useState(initialMinutes);\n\n//   const [difficulty, setDifficulty] = useState(initialData?.difficulty || \"Easy\");\n//   const [ingredients, setIngredients] = useState(initialData?.ingredients || [\"\"]);\n\n//   // Handler to add/update a recipe\n//   const onAddOrEdit = (newRecipe) => {\n//     const existingRecipes = JSON.parse(localStorage.getItem('recipes')) || [];//get recipe\n//     // console.log(\"Existing Recipes: \", existingRecipes);//[{}]\n//     if (initialData?.id) {//edit recipe id\n//       // console.log(\"Initial Data ID: \", initialData.id); // Logs the ID of the recipe being edited\n//       // console.log(\"New Recipe: \", newRecipe);//{}\n//       // Editing an existing recipe\n//       const updatedRecipes = existingRecipes.map(recipe =>\n//         recipe.id === initialData.id ? newRecipe : recipe//jena id match thay ta add\n//         //initialData.id cha recipe thase otherwise newrecipe\n//       );\n//       // console.log(\"Updated Recipes: \", updatedRecipes);[{}]\n//       localStorage.setItem('recipes', JSON.stringify(updatedRecipes));\n//     } else {\n//       // Adding a new recipe\n//       const newRecipeWithId = { ...newRecipe, id: Date.now() }; //{id: \"1\", name: \"pasta\"}\n//       // console.log(\"New Recipe with ID: \", newRecipeWithId);\n//       const updatedRecipes = [...existingRecipes, newRecipeWithId];//[{id:\"1\", name: \"pasta\"},{id:\"123\", name: \"Sandwhich\"}]\n//       // console.log(\"existingRecipes\",existingRecipes);//all recipe [{}]\n//       //console.log(\"newRecipeWithId\",newRecipeWithId); {}\n//       //console.log(\"Updated Recipes with New Recipe: \", updatedRecipes); // Logs the list after adding the new recipe\n//       localStorage.setItem('recipes', JSON.stringify(updatedRecipes));//save\n\n//     }\n//   };\n\n//   // Handle form submission\n//   const handleSubmit = (e) => {\n//     e.preventDefault();\n//     const paddedMinutes = minutes.toString().padStart(2, '0');\n//     const timeString = `${hours}:${paddedMinutes}`;\n\n//     const newRecipe = {\n//       id: initialData?.id || Date.now(),\n//       name,\n//       cuisine,\n//       instructions,\n//       time: timeString,\n//       difficulty,\n//       ingredients: ingredients.filter((ing) => ing!== \"\"),\n//       userEmail: user.email\n//     };\n\n//     console.log(\"new recipe: \", newRecipe);\n\n//     onAddOrEdit(newRecipe); // Add or Edit the recipe\n//     navigate('/'); // Navigate to the homepage after submission\n//   };\n\n//   // Handle ingredient changes (add/remove ingredients)\n//   const handleIngredientChange = (index, value) => {//change in input field \n//     const updatedIngredients = [...ingredients];//copy ingredients array like:ingredients = [\"Salt\", \"Pepper\", \"Oil\"]\n//     updatedIngredients[index] = value;//update value, like(1,\"Chilli\")\n//     setIngredients(updatedIngredients);//update ingredients array, like: [\"Salt\", \"Chili\", \"Oil\"].\n//   };\n\n//   const addIngredient = () => {\n//     setIngredients([...ingredients, '']);//ingredients array ma blank box add karva\n//   };\n\n//   const removeIngredient = (index) => {\n//     const updatedIngredients = ingredients.filter((_, i) => i !== index);//_ aa element \n//     setIngredients(updatedIngredients);//[]\n//   };\n//   //ingredients = [\"Tomato\", \"Onion\", \"Garlic\"] //remove: onion - index 1\n//   //\"Tomato\" -> 0 -> 0!==1 -> including in new list\n//   //\"Onion\" -> 1 -> 1!==1 -> include nahi thay\n\n//   return (\n//     <form onSubmit={handleSubmit} className=\"container\" style={{ maxWidth: '600px' }}>\n//       <h2>{initialData?.id ? 'Edit Recipe' : 'Add Recipe'}</h2>\n\n//       <label>Recipe Name:</label>\n//       <input\n//         value={name}\n//         onChange={(e) => setName(e.target.value)}\n//         required\n//       />\n\n//       <label>Cuisine Type:</label>\n//       <select\n//         value={cuisine}\n//         onChange={(e) => setCuisine(e.target.value)}\n//         required\n//       >\n//         <option value=\"\">Select cuisine</option>\n//         <option>Italian</option>\n//         <option>Mexican</option>\n//         <option>Asian</option>\n//       </select>\n\n//       <label>Instructions:</label>\n//       <textarea\n//         value={instructions}\n//         onChange={(e) => setInstructions(e.target.value)}\n//         rows={4}\n//         required\n//       />\n\n//       <label>Cooking Time:</label>\n//       <div style={{ display: 'flex', gap: '10px', alignItems: 'center' }}>\n//         <div style={{marginRight:'5px'}}>\n//           <input\n//             type=\"number\"\n//             min=\"0\"\n//             value={hours}\n//             onChange={(e) => setHours(Number(e.target.value))}\n//             required\n//             placeholder=\"Hours\"\n//           />\n//         </div> Hours\n\n//         <div style={{marginRight:'5px'}}>\n//           <input\n//             type=\"number\"\n//             min=\"0\"\n//             max=\"59\"\n//             value={minutes}\n//             onChange={(e) => setMinutes(Math.min(Number(e.target.value), 59))}\n//             required\n//             placeholder=\"Minutes\"\n//           />\n//         </div> Minutes\n//       </div>\n\n//       <div style={{ display: 'flex', alignItems: 'center', gap: '1rem', marginBottom: '10px' }}>\n//         <label style={{ whiteSpace: 'nowrap' }}>Difficulty Level:</label>\n\n//         <div style={{ display: 'flex', gap: '1rem' }}>\n//           <label style={{ display: 'flex', alignItems: 'center', gap: '0.3rem' }}>\n//             <input type=\"radio\" name=\"difficulty\" value=\"Easy\" checked={difficulty === \"Easy\"} onChange={() => setDifficulty(\"Easy\")} />\n//             Easy\n//           </label>\n\n//           <label style={{ display: 'flex', alignItems: 'center', gap: '0.3rem' }}>\n//             <input type=\"radio\" name=\"difficulty\" value=\"Medium\" checked={difficulty === \"Medium\"} onChange={() => setDifficulty(\"Medium\")} />\n//             Medium\n//           </label>\n\n//           <label style={{ display: 'flex', alignItems: 'center', gap: '0.3rem' }}>\n//             <input type=\"radio\" name=\"difficulty\" value=\"Hard\" checked={difficulty === \"Hard\"} onChange={() => setDifficulty(\"Hard\")} />\n//             Hard\n//           </label>\n//         </div>\n//       </div>\n\n//       <label>Ingredients:</label>\n//       {ingredients.map((ingredient, index) => (\n//         <div key={index} style={{ display: 'flex', alignItems: 'center', gap: '0.5rem', marginBottom: '5px' }}>\n//           <input\n//             type=\"text\"\n//             value={ingredient}\n//             onChange={(e) => handleIngredientChange(index, e.target.value)}\n//             placeholder={`Ingredient ${index + 1}`}\n//             style={{ flex: 1 }}\n//             required\n//           />\n//           {ingredients.length > 1 && (\n//             <button\n//               type=\"button\"\n//               onClick={() => removeIngredient(index)}\n//               style={{\n//                 background: 'red',\n//                 color: 'white',\n//                 border: 'none',\n//                 borderRadius: '50%',\n//                 padding: '8px',\n//                 width: '30px',\n//                 height: '30px',\n//                 cursor: 'pointer',\n//                 // alignItems: 'center',\n//                 // justifyContent: 'center'\n//               }}\n//               aria-label={`Delete ingredient ${index + 1}`}\n//             >\n//               X\n//             </button>\n//           )}\n//         </div>\n//       ))}\n\n//       <div style={{ marginBottom: '15px', display: 'flex', gap: '10px' }}>\n//         <button type=\"button\" onClick={addIngredient}>Add Ingredient</button>\n//       </div>\n\n//       <button type=\"submit\" style={{ marginBottom: '20px' }}>\n//         {initialData?.id ? 'Update Recipe' : 'Add Recipe'}\n//       </button>\n//     </form>\n//   );\n// };\n\n// export default RecipeForm;\n\n// //filtering data set\n// //click logo go to home page\n// //form add one field HH:MM and logic add and edit form\n// //show my recipe btn click show login user recipe with edit and delete flow. otherwise show all recipe.\n\nimport React, { useContext, useEffect, useState } from 'react';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { AuthContext } from '../utils/Auth';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst RecipeForm = () => {\n  _s();\n  const {\n    id\n  } = useParams();\n  const navigate = useNavigate();\n  const {\n    user\n  } = useContext(AuthContext);\n  const [initialData, setInitialData] = useState(null);\n  const [loading, setLoading] = useState(!!id);\n\n  // Form state\n  const [name, setName] = useState('');\n  const [cuisine, setCuisine] = useState('');\n  const [instructions, setInstructions] = useState('');\n  const [hours, setHours] = useState(0);\n  const [minutes, setMinutes] = useState(0);\n  const [difficulty, setDifficulty] = useState('Easy');\n  const [ingredients, setIngredients] = useState(['']);\n\n  // Parse \"HH:MM\" string\n  const parseTime = timeStr => {\n    const parts = timeStr ? timeStr.split(':') : [];\n    const hours = parts[0] && !isNaN(parts[0]) ? parseInt(parts[0]) : 0;\n    const minutes = parts[1] && !isNaN(parts[1]) ? parseInt(parts[1]) : 0;\n    return {\n      hours,\n      minutes\n    };\n  };\n\n  // Fetch recipe data if editing\n  useEffect(() => {\n    const fetchRecipe = async () => {\n      if (!id) return;\n      try {\n        const res = await fetch(`http://localhost:5000/api/recipes/${id}`);\n        if (!res.ok) throw new Error('Recipe not found');\n        const data = await res.json();\n        setInitialData(data.recipe);\n        setName(data.recipe.name || '');\n        setCuisine(data.recipe.cuisine || '');\n        setInstructions(data.recipe.instructions || '');\n        const {\n          hours,\n          minutes\n        } = parseTime(data.recipe.time);\n        setHours(hours);\n        setMinutes(minutes);\n        setDifficulty(data.recipe.difficulty || 'Easy');\n        setIngredients(data.recipe.ingredients || ['']);\n      } catch (err) {\n        console.error(err);\n        alert('Failed to load recipe.');\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchRecipe();\n  }, [id]);\n  const handleSubmit = async e => {\n    e.preventDefault();\n    const paddedMinutes = minutes.toString().padStart(2, '0');\n    const timeString = `${hours}:${paddedMinutes}`;\n    const recipeData = {\n      name,\n      cuisine,\n      instructions,\n      time: timeString,\n      difficulty,\n      ingredients: ingredients.filter(ing => ing !== ''),\n      userEmail: user === null || user === void 0 ? void 0 : user.email\n    };\n    try {\n      if (initialData !== null && initialData !== void 0 && initialData._id) {\n        // Edit existing recipe\n        const res = await fetch(`http://localhost:5000/api/recipes/${initialData._id}`, {\n          method: 'PATCH',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify(recipeData)\n        });\n        if (!res.ok) throw new Error('Failed to update recipe');\n      } else {\n        // Create new recipe\n        const res = await fetch('http://localhost:5000/api/recipes', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify(recipeData)\n        });\n        if (!res.ok) throw new Error('Failed to add recipe');\n      }\n      navigate('/');\n    } catch (err) {\n      console.error(err);\n      alert('Something went wrong.');\n    }\n  };\n  const handleIngredientChange = (index, value) => {\n    const updated = [...ingredients];\n    updated[index] = value;\n    setIngredients(updated);\n  };\n  const addIngredient = () => setIngredients([...ingredients, '']);\n  const removeIngredient = index => {\n    const updated = ingredients.filter((_, i) => i !== index);\n    setIngredients(updated);\n  };\n  if (loading) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 362,\n    columnNumber: 23\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: handleSubmit,\n    className: \"container\",\n    style: {\n      maxWidth: '600px'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: initialData ? 'Edit Recipe' : 'Add Recipe'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 366,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      children: \"Recipe Name:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 368,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      value: name,\n      onChange: e => setName(e.target.value),\n      required: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 369,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      children: \"Cuisine Type:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 371,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n      value: cuisine,\n      onChange: e => setCuisine(e.target.value),\n      required: true,\n      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"\",\n        children: \"Select cuisine\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 373,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        children: \"Italian\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 374,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        children: \"Mexican\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 375,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        children: \"Asian\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 376,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 372,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      children: \"Instructions:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 379,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n      value: instructions,\n      onChange: e => setInstructions(e.target.value),\n      rows: 4,\n      required: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 380,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      children: \"Cooking Time:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 382,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'flex',\n        gap: '10px',\n        alignItems: 'center'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        min: \"0\",\n        value: hours,\n        onChange: e => setHours(Number(e.target.value)),\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 384,\n        columnNumber: 9\n      }, this), \"Hours\", /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        min: \"0\",\n        max: \"59\",\n        value: minutes,\n        onChange: e => setMinutes(Math.min(Number(e.target.value), 59)),\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 386,\n        columnNumber: 9\n      }, this), \"Minutes\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 383,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'flex',\n        alignItems: 'center',\n        gap: '1rem',\n        marginBottom: '10px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        style: {\n          whiteSpace: 'nowrap'\n        },\n        children: \"Difficulty Level:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 398,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: 'flex',\n          gap: '1rem'\n        },\n        children: ['Easy', 'Medium', 'Hard'].map(level => /*#__PURE__*/_jsxDEV(\"label\", {\n          style: {\n            display: 'flex',\n            alignItems: 'center',\n            gap: '0.3rem'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"radio\",\n            name: \"difficulty\",\n            value: level,\n            checked: difficulty === level,\n            onChange: () => setDifficulty(level)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 402,\n            columnNumber: 15\n          }, this), level]\n        }, level, true, {\n          fileName: _jsxFileName,\n          lineNumber: 401,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 399,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 397,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      children: \"Ingredients:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 409,\n      columnNumber: 7\n    }, this), ingredients.map((ingredient, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'flex',\n        alignItems: 'center',\n        gap: '0.5rem',\n        marginBottom: '5px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: ingredient,\n        onChange: e => handleIngredientChange(index, e.target.value),\n        placeholder: `Ingredient ${index + 1}`,\n        style: {\n          flex: 1\n        },\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 412,\n        columnNumber: 11\n      }, this), ingredients.length > 1 && /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: () => removeIngredient(index),\n        style: {\n          background: 'red',\n          color: 'white',\n          border: 'none',\n          borderRadius: '50%',\n          padding: '8px',\n          width: '30px',\n          height: '30px',\n          cursor: 'pointer'\n        },\n        \"aria-label\": `Delete ingredient ${index + 1}`,\n        children: \"X\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 421,\n        columnNumber: 13\n      }, this)]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 411,\n      columnNumber: 9\n    }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"button\",\n      onClick: addIngredient,\n      style: {\n        marginBottom: '15px'\n      },\n      children: \"Add Ingredient\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 442,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"submit\",\n      children: initialData ? 'Update Recipe' : 'Add Recipe'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 446,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 365,\n    columnNumber: 5\n  }, this);\n};\n_s(RecipeForm, \"i4oo0fBKyN/volyMF8TP19tEv1o=\", false, function () {\n  return [useParams, useNavigate];\n});\n_c = RecipeForm;\nexport default RecipeForm;\nvar _c;\n$RefreshReg$(_c, \"RecipeForm\");","map":{"version":3,"names":["React","useContext","useEffect","useState","useNavigate","useParams","AuthContext","jsxDEV","_jsxDEV","RecipeForm","_s","id","navigate","user","initialData","setInitialData","loading","setLoading","name","setName","cuisine","setCuisine","instructions","setInstructions","hours","setHours","minutes","setMinutes","difficulty","setDifficulty","ingredients","setIngredients","parseTime","timeStr","parts","split","isNaN","parseInt","fetchRecipe","res","fetch","ok","Error","data","json","recipe","time","err","console","error","alert","handleSubmit","e","preventDefault","paddedMinutes","toString","padStart","timeString","recipeData","filter","ing","userEmail","email","_id","method","headers","body","JSON","stringify","handleIngredientChange","index","value","updated","addIngredient","removeIngredient","_","i","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","className","style","maxWidth","onChange","target","required","rows","display","gap","alignItems","type","min","Number","max","Math","marginBottom","whiteSpace","map","level","checked","ingredient","placeholder","flex","length","onClick","background","color","border","borderRadius","padding","width","height","cursor","_c","$RefreshReg$"],"sources":["C:/Users/Shivani/react recipe-project/recipe-manager/frontend/src/Components/RecipeForm.jsx"],"sourcesContent":["// import React, { useContext, useState } from 'react';\r\n// import { useNavigate, useParams } from 'react-router-dom';\r\n// import { AuthContext } from '../utils/Auth';\r\n\r\n// const RecipeForm = () => {\r\n//   const { id } = useParams();//url ne ander thi dynamic value.\r\n//   const navigate = useNavigate();\r\n//   const { user } = useContext(AuthContext);\r\n\r\n//   const recipes = JSON.parse(localStorage.getItem('recipes')) || [];\r\n//   // Retrieve initial data for editing (if any)\r\n//   const initialData = id ? recipes.find((r) => r.id.toString() === id) : {};\r\n//   //console.log(\"initialData: \",initialData);//recipe obj\r\n//   //const id = \"102\" url thi \r\n//   // const recipes = [{ id: 101, name: \"Pasta\" },{ id: 102, name: \"Pizza\" },{ id: 103, name: \"Burger\" }];\r\n//   //find r.id \"102\" === \"102\" = initialdata ma update thay \r\n//   const parseTime = (timeStr) => {\r\n//     const parts = timeStr ? timeStr.split(':') : [];\r\n//     // console.log(\"parts: \",parts);['2', '14']  \r\n//     const hours = parts[0] && !isNaN(parts[0]) ? parseInt(parts[0]) : 0;\r\n//     //console.log(\"hours: \",hours); //parts[0] - \"2\" \r\n//     const minutes = parts[1] && !isNaN(parts[1]) ? parseInt(parts[1]) : 0;\r\n//     // console.log(\"minutes: \",minutes);   //parts[1] - \"30\"\r\n//     return { hours, minutes };\r\n//   };\r\n\r\n//   // Parse the time into hours and minutes\r\n//   const { hours: initialHours, minutes: initialMinutes } = parseTime(initialData?.time);\r\n//   // console.log(\"parseTime\",parseTime(initialData?.time)); {}\r\n  \r\n\r\n\r\n//   // State hooks for form inputs\r\n//   const [name, setName] = useState(initialData?.name || \"\");\r\n//   const [cuisine, setCuisine] = useState(initialData?.cuisine || \"\");\r\n//   const [instructions, setInstructions] = useState(initialData?.instructions || \"\");\r\n\r\n//   // Ensure that hours and minutes are initialized with valid values\r\n//   const [hours, setHours] = useState(initialHours);\r\n//   const [minutes, setMinutes] = useState(initialMinutes);\r\n\r\n//   const [difficulty, setDifficulty] = useState(initialData?.difficulty || \"Easy\");\r\n//   const [ingredients, setIngredients] = useState(initialData?.ingredients || [\"\"]);\r\n\r\n//   // Handler to add/update a recipe\r\n//   const onAddOrEdit = (newRecipe) => {\r\n//     const existingRecipes = JSON.parse(localStorage.getItem('recipes')) || [];//get recipe\r\n//     // console.log(\"Existing Recipes: \", existingRecipes);//[{}]\r\n//     if (initialData?.id) {//edit recipe id\r\n//       // console.log(\"Initial Data ID: \", initialData.id); // Logs the ID of the recipe being edited\r\n//       // console.log(\"New Recipe: \", newRecipe);//{}\r\n//       // Editing an existing recipe\r\n//       const updatedRecipes = existingRecipes.map(recipe =>\r\n//         recipe.id === initialData.id ? newRecipe : recipe//jena id match thay ta add\r\n//         //initialData.id cha recipe thase otherwise newrecipe\r\n//       );\r\n//       // console.log(\"Updated Recipes: \", updatedRecipes);[{}]\r\n//       localStorage.setItem('recipes', JSON.stringify(updatedRecipes));\r\n//     } else {\r\n//       // Adding a new recipe\r\n//       const newRecipeWithId = { ...newRecipe, id: Date.now() }; //{id: \"1\", name: \"pasta\"}\r\n//       // console.log(\"New Recipe with ID: \", newRecipeWithId);\r\n//       const updatedRecipes = [...existingRecipes, newRecipeWithId];//[{id:\"1\", name: \"pasta\"},{id:\"123\", name: \"Sandwhich\"}]\r\n//       // console.log(\"existingRecipes\",existingRecipes);//all recipe [{}]\r\n//       //console.log(\"newRecipeWithId\",newRecipeWithId); {}\r\n//       //console.log(\"Updated Recipes with New Recipe: \", updatedRecipes); // Logs the list after adding the new recipe\r\n//       localStorage.setItem('recipes', JSON.stringify(updatedRecipes));//save\r\n\r\n//     }\r\n//   };\r\n\r\n//   // Handle form submission\r\n//   const handleSubmit = (e) => {\r\n//     e.preventDefault();\r\n//     const paddedMinutes = minutes.toString().padStart(2, '0');\r\n//     const timeString = `${hours}:${paddedMinutes}`;\r\n\r\n//     const newRecipe = {\r\n//       id: initialData?.id || Date.now(),\r\n//       name,\r\n//       cuisine,\r\n//       instructions,\r\n//       time: timeString,\r\n//       difficulty,\r\n//       ingredients: ingredients.filter((ing) => ing!== \"\"),\r\n//       userEmail: user.email\r\n//     };\r\n\r\n//     console.log(\"new recipe: \", newRecipe);\r\n\r\n//     onAddOrEdit(newRecipe); // Add or Edit the recipe\r\n//     navigate('/'); // Navigate to the homepage after submission\r\n//   };\r\n\r\n//   // Handle ingredient changes (add/remove ingredients)\r\n//   const handleIngredientChange = (index, value) => {//change in input field \r\n//     const updatedIngredients = [...ingredients];//copy ingredients array like:ingredients = [\"Salt\", \"Pepper\", \"Oil\"]\r\n//     updatedIngredients[index] = value;//update value, like(1,\"Chilli\")\r\n//     setIngredients(updatedIngredients);//update ingredients array, like: [\"Salt\", \"Chili\", \"Oil\"].\r\n//   };\r\n\r\n//   const addIngredient = () => {\r\n//     setIngredients([...ingredients, '']);//ingredients array ma blank box add karva\r\n//   };\r\n\r\n//   const removeIngredient = (index) => {\r\n//     const updatedIngredients = ingredients.filter((_, i) => i !== index);//_ aa element \r\n//     setIngredients(updatedIngredients);//[]\r\n//   };\r\n//   //ingredients = [\"Tomato\", \"Onion\", \"Garlic\"] //remove: onion - index 1\r\n//   //\"Tomato\" -> 0 -> 0!==1 -> including in new list\r\n//   //\"Onion\" -> 1 -> 1!==1 -> include nahi thay\r\n\r\n//   return (\r\n//     <form onSubmit={handleSubmit} className=\"container\" style={{ maxWidth: '600px' }}>\r\n//       <h2>{initialData?.id ? 'Edit Recipe' : 'Add Recipe'}</h2>\r\n\r\n//       <label>Recipe Name:</label>\r\n//       <input\r\n//         value={name}\r\n//         onChange={(e) => setName(e.target.value)}\r\n//         required\r\n//       />\r\n\r\n//       <label>Cuisine Type:</label>\r\n//       <select\r\n//         value={cuisine}\r\n//         onChange={(e) => setCuisine(e.target.value)}\r\n//         required\r\n//       >\r\n//         <option value=\"\">Select cuisine</option>\r\n//         <option>Italian</option>\r\n//         <option>Mexican</option>\r\n//         <option>Asian</option>\r\n//       </select>\r\n\r\n//       <label>Instructions:</label>\r\n//       <textarea\r\n//         value={instructions}\r\n//         onChange={(e) => setInstructions(e.target.value)}\r\n//         rows={4}\r\n//         required\r\n//       />\r\n\r\n//       <label>Cooking Time:</label>\r\n//       <div style={{ display: 'flex', gap: '10px', alignItems: 'center' }}>\r\n//         <div style={{marginRight:'5px'}}>\r\n//           <input\r\n//             type=\"number\"\r\n//             min=\"0\"\r\n//             value={hours}\r\n//             onChange={(e) => setHours(Number(e.target.value))}\r\n//             required\r\n//             placeholder=\"Hours\"\r\n//           />\r\n//         </div> Hours\r\n\r\n//         <div style={{marginRight:'5px'}}>\r\n//           <input\r\n//             type=\"number\"\r\n//             min=\"0\"\r\n//             max=\"59\"\r\n//             value={minutes}\r\n//             onChange={(e) => setMinutes(Math.min(Number(e.target.value), 59))}\r\n//             required\r\n//             placeholder=\"Minutes\"\r\n//           />\r\n//         </div> Minutes\r\n//       </div>\r\n\r\n//       <div style={{ display: 'flex', alignItems: 'center', gap: '1rem', marginBottom: '10px' }}>\r\n//         <label style={{ whiteSpace: 'nowrap' }}>Difficulty Level:</label>\r\n\r\n//         <div style={{ display: 'flex', gap: '1rem' }}>\r\n//           <label style={{ display: 'flex', alignItems: 'center', gap: '0.3rem' }}>\r\n//             <input type=\"radio\" name=\"difficulty\" value=\"Easy\" checked={difficulty === \"Easy\"} onChange={() => setDifficulty(\"Easy\")} />\r\n//             Easy\r\n//           </label>\r\n\r\n//           <label style={{ display: 'flex', alignItems: 'center', gap: '0.3rem' }}>\r\n//             <input type=\"radio\" name=\"difficulty\" value=\"Medium\" checked={difficulty === \"Medium\"} onChange={() => setDifficulty(\"Medium\")} />\r\n//             Medium\r\n//           </label>\r\n\r\n//           <label style={{ display: 'flex', alignItems: 'center', gap: '0.3rem' }}>\r\n//             <input type=\"radio\" name=\"difficulty\" value=\"Hard\" checked={difficulty === \"Hard\"} onChange={() => setDifficulty(\"Hard\")} />\r\n//             Hard\r\n//           </label>\r\n//         </div>\r\n//       </div>\r\n\r\n//       <label>Ingredients:</label>\r\n//       {ingredients.map((ingredient, index) => (\r\n//         <div key={index} style={{ display: 'flex', alignItems: 'center', gap: '0.5rem', marginBottom: '5px' }}>\r\n//           <input\r\n//             type=\"text\"\r\n//             value={ingredient}\r\n//             onChange={(e) => handleIngredientChange(index, e.target.value)}\r\n//             placeholder={`Ingredient ${index + 1}`}\r\n//             style={{ flex: 1 }}\r\n//             required\r\n//           />\r\n//           {ingredients.length > 1 && (\r\n//             <button\r\n//               type=\"button\"\r\n//               onClick={() => removeIngredient(index)}\r\n//               style={{\r\n//                 background: 'red',\r\n//                 color: 'white',\r\n//                 border: 'none',\r\n//                 borderRadius: '50%',\r\n//                 padding: '8px',\r\n//                 width: '30px',\r\n//                 height: '30px',\r\n//                 cursor: 'pointer',\r\n//                 // alignItems: 'center',\r\n//                 // justifyContent: 'center'\r\n//               }}\r\n//               aria-label={`Delete ingredient ${index + 1}`}\r\n//             >\r\n//               X\r\n//             </button>\r\n//           )}\r\n//         </div>\r\n//       ))}\r\n\r\n//       <div style={{ marginBottom: '15px', display: 'flex', gap: '10px' }}>\r\n//         <button type=\"button\" onClick={addIngredient}>Add Ingredient</button>\r\n//       </div>\r\n\r\n//       <button type=\"submit\" style={{ marginBottom: '20px' }}>\r\n//         {initialData?.id ? 'Update Recipe' : 'Add Recipe'}\r\n//       </button>\r\n//     </form>\r\n//   );\r\n// };\r\n\r\n// export default RecipeForm;\r\n\r\n// //filtering data set\r\n// //click logo go to home page\r\n// //form add one field HH:MM and logic add and edit form\r\n// //show my recipe btn click show login user recipe with edit and delete flow. otherwise show all recipe.\r\n\r\n\r\n\r\nimport React, { useContext, useEffect, useState } from 'react';\r\nimport { useNavigate, useParams } from 'react-router-dom';\r\nimport { AuthContext } from '../utils/Auth';\r\n\r\nconst RecipeForm = () => {\r\n  const { id } = useParams();\r\n  const navigate = useNavigate();\r\n  const { user } = useContext(AuthContext);\r\n\r\n  const [initialData, setInitialData] = useState(null);\r\n  const [loading, setLoading] = useState(!!id);\r\n\r\n  // Form state\r\n  const [name, setName] = useState('');\r\n  const [cuisine, setCuisine] = useState('');\r\n  const [instructions, setInstructions] = useState('');\r\n  const [hours, setHours] = useState(0);\r\n  const [minutes, setMinutes] = useState(0);\r\n  const [difficulty, setDifficulty] = useState('Easy');\r\n  const [ingredients, setIngredients] = useState(['']);\r\n\r\n  // Parse \"HH:MM\" string\r\n  const parseTime = (timeStr) => {\r\n    const parts = timeStr ? timeStr.split(':') : [];\r\n    const hours = parts[0] && !isNaN(parts[0]) ? parseInt(parts[0]) : 0;\r\n    const minutes = parts[1] && !isNaN(parts[1]) ? parseInt(parts[1]) : 0;\r\n    return { hours, minutes };\r\n  };\r\n\r\n  // Fetch recipe data if editing\r\n  useEffect(() => {\r\n    const fetchRecipe = async () => {\r\n      if (!id) return;\r\n\r\n      try {\r\n        const res = await fetch(`http://localhost:5000/api/recipes/${id}`);\r\n        if (!res.ok) throw new Error('Recipe not found');\r\n        const data = await res.json();\r\n        setInitialData(data.recipe);\r\n        setName(data.recipe.name || '');\r\n        setCuisine(data.recipe.cuisine || '');\r\n        setInstructions(data.recipe.instructions || '');\r\n        const { hours, minutes } = parseTime(data.recipe.time);\r\n        setHours(hours);\r\n        setMinutes(minutes);\r\n        setDifficulty(data.recipe.difficulty || 'Easy');\r\n        setIngredients(data.recipe.ingredients || ['']);\r\n      } catch (err) {\r\n        console.error(err);\r\n        alert('Failed to load recipe.');\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchRecipe();\r\n  }, [id]);\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n\r\n    const paddedMinutes = minutes.toString().padStart(2, '0');\r\n    const timeString = `${hours}:${paddedMinutes}`;\r\n\r\n    const recipeData = {\r\n      name,\r\n      cuisine,\r\n      instructions,\r\n      time: timeString,\r\n      difficulty,\r\n      ingredients: ingredients.filter((ing) => ing !== ''),\r\n      userEmail: user?.email,\r\n    };\r\n\r\n    try {\r\n      if (initialData?._id) {\r\n        // Edit existing recipe\r\n        const res = await fetch(`http://localhost:5000/api/recipes/${initialData._id}`, {\r\n          method: 'PATCH',\r\n          headers: { 'Content-Type': 'application/json' },\r\n          body: JSON.stringify(recipeData),\r\n        });\r\n\r\n        if (!res.ok) throw new Error('Failed to update recipe');\r\n      } else {\r\n        // Create new recipe\r\n        const res = await fetch('http://localhost:5000/api/recipes', {\r\n          method: 'POST',\r\n          headers: { 'Content-Type': 'application/json' },\r\n          body: JSON.stringify(recipeData),\r\n        });\r\n\r\n        if (!res.ok) throw new Error('Failed to add recipe');\r\n      }\r\n\r\n      navigate('/');\r\n    } catch (err) {\r\n      console.error(err);\r\n      alert('Something went wrong.');\r\n    }\r\n  };\r\n\r\n  const handleIngredientChange = (index, value) => {\r\n    const updated = [...ingredients];\r\n    updated[index] = value;\r\n    setIngredients(updated);\r\n  };\r\n\r\n  const addIngredient = () => setIngredients([...ingredients, '']);\r\n\r\n  const removeIngredient = (index) => {\r\n    const updated = ingredients.filter((_, i) => i !== index);\r\n    setIngredients(updated);\r\n  };\r\n\r\n  if (loading) return <p>Loading...</p>;\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit} className=\"container\" style={{ maxWidth: '600px' }}>\r\n      <h2>{initialData ? 'Edit Recipe' : 'Add Recipe'}</h2>\r\n\r\n      <label>Recipe Name:</label>\r\n      <input value={name} onChange={(e) => setName(e.target.value)} required />\r\n\r\n      <label>Cuisine Type:</label>\r\n      <select value={cuisine} onChange={(e) => setCuisine(e.target.value)} required>\r\n        <option value=\"\">Select cuisine</option>\r\n        <option>Italian</option>\r\n        <option>Mexican</option>\r\n        <option>Asian</option>\r\n      </select>\r\n\r\n      <label>Instructions:</label>\r\n      <textarea value={instructions} onChange={(e) => setInstructions(e.target.value)} rows={4} required />\r\n\r\n      <label>Cooking Time:</label>\r\n      <div style={{ display: 'flex', gap: '10px', alignItems: 'center' }}>\r\n        <input type=\"number\" min=\"0\" value={hours} onChange={(e) => setHours(Number(e.target.value))} required />\r\n        Hours\r\n        <input\r\n          type=\"number\"\r\n          min=\"0\"\r\n          max=\"59\"\r\n          value={minutes}\r\n          onChange={(e) => setMinutes(Math.min(Number(e.target.value), 59))}\r\n          required\r\n        />\r\n        Minutes\r\n      </div>\r\n\r\n      <div style={{ display: 'flex', alignItems: 'center', gap: '1rem', marginBottom: '10px' }}>\r\n        <label style={{ whiteSpace: 'nowrap' }}>Difficulty Level:</label>\r\n        <div style={{ display: 'flex', gap: '1rem' }}>\r\n          {['Easy', 'Medium', 'Hard'].map((level) => (\r\n            <label key={level} style={{ display: 'flex', alignItems: 'center', gap: '0.3rem' }}>\r\n              <input type=\"radio\" name=\"difficulty\" value={level} checked={difficulty === level} onChange={() => setDifficulty(level)} />\r\n              {level}\r\n            </label>\r\n          ))}\r\n        </div>\r\n      </div>\r\n\r\n      <label>Ingredients:</label>\r\n      {ingredients.map((ingredient, index) => (\r\n        <div key={index} style={{ display: 'flex', alignItems: 'center', gap: '0.5rem', marginBottom: '5px' }}>\r\n          <input\r\n            type=\"text\"\r\n            value={ingredient}\r\n            onChange={(e) => handleIngredientChange(index, e.target.value)}\r\n            placeholder={`Ingredient ${index + 1}`}\r\n            style={{ flex: 1 }}\r\n            required\r\n          />\r\n          {ingredients.length > 1 && (\r\n            <button\r\n              type=\"button\"\r\n              onClick={() => removeIngredient(index)}\r\n              style={{\r\n                background: 'red',\r\n                color: 'white',\r\n                border: 'none',\r\n                borderRadius: '50%',\r\n                padding: '8px',\r\n                width: '30px',\r\n                height: '30px',\r\n                cursor: 'pointer',\r\n              }}\r\n              aria-label={`Delete ingredient ${index + 1}`}\r\n            >\r\n              X\r\n            </button>\r\n          )}\r\n        </div>\r\n      ))}\r\n\r\n      <button type=\"button\" onClick={addIngredient} style={{ marginBottom: '15px' }}>\r\n        Add Ingredient\r\n      </button>\r\n\r\n      <button type=\"submit\">{initialData ? 'Update Recipe' : 'Add Recipe'}</button>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default RecipeForm;"],"mappings":";;AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAIA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAIA,OAAOA,KAAK,IAAIC,UAAU,EAAEC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC9D,SAASC,WAAW,EAAEC,SAAS,QAAQ,kBAAkB;AACzD,SAASC,W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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}