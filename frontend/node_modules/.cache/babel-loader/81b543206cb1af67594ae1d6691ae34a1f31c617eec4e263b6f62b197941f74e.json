{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Shivani\\\\react recipe-project\\\\recipe-manager\\\\frontend\\\\src\\\\utils\\\\Auth.js\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext(); //create context\n\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  // Load user from localStorage \n  useEffect(() => {\n    const savedUser = JSON.parse(localStorage.getItem(\"user\"));\n    console.log(\"savedUser:\", savedUser); //user obj\n\n    if (savedUser) {\n      setUser(savedUser);\n    }\n    setLoading(false); //app open login user show thay.\n  }, []);\n\n  // const loginUser = (email, password) => {\n  //   const users = JSON.parse(localStorage.getItem(\"users\")) || [];\n  //   console.log(\"users:\",users);//[{}]\n  //   //JSON.parse - string na js obj ma convert, localStorage.getItem(\"users\") - \n  //   // localstorage -> \"users\" name ne key ma rahela data lave , localstorage ma badhu string ma store thay.\n  //   const foundUser = users.find(u => u.email === email && u.password === password);\n  //   console.log(\"found user: \",foundUser);//user obj\n\n  //   if (foundUser) {\n  //     setUser(foundUser);\n  //     localStorage.setItem(\"user\", JSON.stringify(foundUser));//JSON.stringify - obj to convert string because localstorage store data.\n  //     return true;\n  //   }\n  //   return false;\n  // };\n\n  const loginUser = async (email, password) => {\n    try {\n      const response = await fetch(\"http://localhost:5000/api/login\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          email,\n          password\n        })\n      });\n      if (!response.ok) return false;\n      const data = await response.json();\n      setUser(data.user);\n      localStorage.setItem(\"user\", JSON.stringify(data.user));\n      return true;\n    } catch (error) {\n      console.error(\"Login error:\", error);\n      return false;\n    }\n  };\n\n  // const signupUser = (email, password,name) => {\n  //   // console.log(\"Signup initiated with:\", email, password, name);\n  //   const users = JSON.parse(localStorage.getItem(\"users\")) || [];//[{}]\n  //   //  console.log(\" Existing users from localStorage:\", users);//{}\n  //   if (users.find(u => u.email === email)) {//userslist ma pela thi koi user hase jena email match thay to ta user pela thi register hase\n  //     // console.log(\"User already exists with this email:\", email);\n  //     return false;\n  //   } // userlist ma check kare k same email register cha to false\n  //   const newUser = { email, password,name };//{}\n  //   // console.log(\"Creating new user:\", newUser);\n  //   users.push(newUser);//userlist array [{}]\n  //   // console.log(\"Updated users array:\", users);\n  //   localStorage.setItem(\"users\", JSON.stringify(users));//whole user array to convert string and store localstorage \"users\"\n  //   // console.log(\"Stored updated users in localStorage\");{}\n  //   setUser(newUser);//new user login user set {}\n  //   // console.log(\"Set current user state:\", newUser);\n  //   localStorage.setItem(\"user\", JSON.stringify(newUser));//new user \"user\" key sathe store {}\n  //  //console.log(\"Saved current user in localStorage\");\n  //   // console.log(\"Signup successful!\");\n  //   return true;\n  // };\n\n  const signupUser = async (email, password, name) => {\n    try {\n      const response = await fetch(\"http://localhost:5000/api/signup\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          email,\n          password,\n          name\n        })\n      });\n      if (!response.ok) return false;\n      const data = await response.json();\n      setUser(data.user);\n      localStorage.setItem(\"user\", JSON.stringify(data.user));\n      return true;\n    } catch (error) {\n      console.error(\"Signup error:\", error);\n      return false;\n    }\n  };\n  const logoutUser = () => {\n    setUser(null);\n    localStorage.removeItem(\"user\");\n    fetch(\"http://localhost:5000/api/auth/logout\", {\n      method: \"GET\"\n    }).catch(err => console.error(\"Logout request failed:\", err));\n  };\n  const getCurrentUser = () => user; //login user no {}\n  // console.log(\"getCurrentUser: \",getCurrentUser());\n\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      user,\n      loginUser,\n      signupUser,\n      logoutUser,\n      getCurrentUser,\n      loading\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 115,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"NiO5z6JIqzX62LS5UWDgIqbZYyY=\");\n_c = AuthProvider;\nexport { AuthContext };\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","user","setUser","loading","setLoading","savedUser","JSON","parse","localStorage","getItem","console","log","loginUser","email","password","response","fetch","method","headers","body","stringify","ok","data","json","setItem","error","signupUser","name","logoutUser","removeItem","catch","err","getCurrentUser","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Shivani/react recipe-project/recipe-manager/frontend/src/utils/Auth.js"],"sourcesContent":["import React, { createContext, useState, useEffect } from \"react\";\r\n\r\n const AuthContext = createContext();//create context\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [user, setUser] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  // Load user from localStorage \r\n  useEffect(() => {\r\n    const savedUser = JSON.parse(localStorage.getItem(\"user\"));\r\n    console.log(\"savedUser:\",savedUser);//user obj\r\n    \r\n    if (savedUser) {\r\n      setUser(savedUser);\r\n    }\r\n    setLoading(false);//app open login user show thay.\r\n  }, []);\r\n\r\n  // const loginUser = (email, password) => {\r\n  //   const users = JSON.parse(localStorage.getItem(\"users\")) || [];\r\n  //   console.log(\"users:\",users);//[{}]\r\n  //   //JSON.parse - string na js obj ma convert, localStorage.getItem(\"users\") - \r\n  //   // localstorage -> \"users\" name ne key ma rahela data lave , localstorage ma badhu string ma store thay.\r\n  //   const foundUser = users.find(u => u.email === email && u.password === password);\r\n  //   console.log(\"found user: \",foundUser);//user obj\r\n    \r\n  //   if (foundUser) {\r\n  //     setUser(foundUser);\r\n  //     localStorage.setItem(\"user\", JSON.stringify(foundUser));//JSON.stringify - obj to convert string because localstorage store data.\r\n  //     return true;\r\n  //   }\r\n  //   return false;\r\n  // };\r\n\r\n  const loginUser = async (email, password) => {\r\n    try {\r\n      const response = await fetch(\"http://localhost:5000/api/login\", {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({ email, password }),\r\n      });\r\n\r\n      if (!response.ok) return false;\r\n\r\n      const data = await response.json();\r\n      setUser(data.user);\r\n      localStorage.setItem(\"user\", JSON.stringify(data.user));\r\n      return true;\r\n    } catch (error) {\r\n      console.error(\"Login error:\", error);\r\n      return false;\r\n    }\r\n  };\r\n\r\n  // const signupUser = (email, password,name) => {\r\n  //   // console.log(\"Signup initiated with:\", email, password, name);\r\n  //   const users = JSON.parse(localStorage.getItem(\"users\")) || [];//[{}]\r\n  //   //  console.log(\" Existing users from localStorage:\", users);//{}\r\n  //   if (users.find(u => u.email === email)) {//userslist ma pela thi koi user hase jena email match thay to ta user pela thi register hase\r\n  //     // console.log(\"User already exists with this email:\", email);\r\n  //     return false;\r\n  //   } // userlist ma check kare k same email register cha to false\r\n  //   const newUser = { email, password,name };//{}\r\n  //   // console.log(\"Creating new user:\", newUser);\r\n  //   users.push(newUser);//userlist array [{}]\r\n  //   // console.log(\"Updated users array:\", users);\r\n  //   localStorage.setItem(\"users\", JSON.stringify(users));//whole user array to convert string and store localstorage \"users\"\r\n  //   // console.log(\"Stored updated users in localStorage\");{}\r\n  //   setUser(newUser);//new user login user set {}\r\n  //   // console.log(\"Set current user state:\", newUser);\r\n  //   localStorage.setItem(\"user\", JSON.stringify(newUser));//new user \"user\" key sathe store {}\r\n  //  //console.log(\"Saved current user in localStorage\");\r\n  //   // console.log(\"Signup successful!\");\r\n  //   return true;\r\n  // };\r\n\r\n\r\n  const signupUser = async (email, password, name) => {\r\n    try {\r\n      const response = await fetch(\"http://localhost:5000/api/signup\", {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({ email, password, name }),\r\n      });\r\n\r\n      if (!response.ok) return false;\r\n\r\n      const data = await response.json();\r\n      setUser(data.user);\r\n      localStorage.setItem(\"user\", JSON.stringify(data.user));\r\n      return true;\r\n    } catch (error) {\r\n      console.error(\"Signup error:\", error);\r\n      return false;\r\n    }\r\n  };\r\n\r\n  const logoutUser = () => {\r\n    setUser(null);\r\n    localStorage.removeItem(\"user\");\r\n    fetch(\"http://localhost:5000/api/auth/logout\", {\r\n    method: \"GET\",\r\n  }).catch((err) => console.error(\"Logout request failed:\", err));\r\n  };\r\n\r\n  const getCurrentUser = () => user;//login user no {}\r\n  // console.log(\"getCurrentUser: \",getCurrentUser());\r\n  \r\n  return (\r\n    <AuthContext.Provider value={{ user, loginUser, signupUser, logoutUser, getCurrentUser,loading }}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\nexport { AuthContext };\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}