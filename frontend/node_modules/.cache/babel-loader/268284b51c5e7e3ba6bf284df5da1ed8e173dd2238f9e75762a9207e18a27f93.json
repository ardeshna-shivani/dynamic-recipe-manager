{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Shivani\\\\react recipe-project\\\\recipe-manager\\\\src\\\\utils\\\\Auth.js\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext(); //create context\n\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  // Load user from localStorage \n  useEffect(() => {\n    const savedUser = JSON.parse(localStorage.getItem(\"user\"));\n    console.log(\"savedUser:\", savedUser); //user obj\n\n    if (savedUser) {\n      setUser(savedUser);\n    }\n    setLoading(false); //app open login user show thay.\n  }, []);\n  const loginUser = (email, password) => {\n    const users = JSON.parse(localStorage.getItem(\"users\")) || [];\n    console.log(\"users:\", users); //[{}]\n    //JSON.parse - string na js obj ma convert, localStorage.getItem(\"users\") - \n    // localstorage -> \"users\" name ne key ma rahela data lave , localstorage ma badhu string ma store thay.\n    const foundUser = users.find(u => u.email === email && u.password === password);\n    console.log(\"found user: \", foundUser); //user obj\n\n    if (foundUser) {\n      setUser(foundUser);\n      localStorage.setItem(\"user\", JSON.stringify(foundUser)); //JSON.stringify - obj to convert string because localstorage store data.\n      return true;\n    }\n    return false;\n  };\n  const signupUser = (email, password, name) => {\n    // console.log(\"Signup initiated with:\", email, password, name);\n    const users = JSON.parse(localStorage.getItem(\"users\")) || []; //[{}]\n    //  console.log(\" Existing users from localStorage:\", users);//{}\n    if (users.find(u => u.email === email)) {\n      //userslist ma pela thi koi user hase jena email match thay to ta user pela thi register hase\n      // console.log(\"User already exists with this email:\", email);\n      return false;\n    } // userlist ma check kare k same email register cha to false\n    const newUser = {\n      email,\n      password,\n      name\n    }; //{}\n    // console.log(\"Creating new user:\", newUser);\n    users.push(newUser); //userlist array [{}]\n    // console.log(\"Updated users array:\", users);\n    localStorage.setItem(\"users\", JSON.stringify(users)); //whole user array to convert string and store localstorage \"users\"\n    // console.log(\"Stored updated users in localStorage\");\n    setUser(newUser); //new user login user set {}\n    // console.log(\"Set current user state:\", newUser);\n    localStorage.setItem(\"user\", JSON.stringify(newUser)); //new user \"user\" key sathe store {}\n    //console.log(\"Saved current user in localStorage\");\n    // console.log(\"Signup successful!\");\n    return true;\n  };\n  const logoutUser = () => {\n    setUser(null);\n    localStorage.removeItem(\"user\");\n  };\n  const getCurrentUser = () => user;\n  console.log(\"getCurrentUser: \", getCurrentUser);\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      user,\n      loginUser,\n      signupUser,\n      logoutUser,\n      getCurrentUser,\n      loading\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"NiO5z6JIqzX62LS5UWDgIqbZYyY=\");\n_c = AuthProvider;\nexport { AuthContext };\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","user","setUser","loading","setLoading","savedUser","JSON","parse","localStorage","getItem","console","log","loginUser","email","password","users","foundUser","find","u","setItem","stringify","signupUser","name","newUser","push","logoutUser","removeItem","getCurrentUser","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Shivani/react recipe-project/recipe-manager/src/utils/Auth.js"],"sourcesContent":["import React, { createContext, useState, useEffect } from \"react\";\r\n\r\n const AuthContext = createContext();//create context\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [user, setUser] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  // Load user from localStorage \r\n  useEffect(() => {\r\n    const savedUser = JSON.parse(localStorage.getItem(\"user\"));\r\n    console.log(\"savedUser:\",savedUser);//user obj\r\n    \r\n    if (savedUser) {\r\n      setUser(savedUser);\r\n    }\r\n    setLoading(false);//app open login user show thay.\r\n  }, []);\r\n\r\n  const loginUser = (email, password) => {\r\n    const users = JSON.parse(localStorage.getItem(\"users\")) || [];\r\n    console.log(\"users:\",users);//[{}]\r\n    //JSON.parse - string na js obj ma convert, localStorage.getItem(\"users\") - \r\n    // localstorage -> \"users\" name ne key ma rahela data lave , localstorage ma badhu string ma store thay.\r\n    const foundUser = users.find(u => u.email === email && u.password === password);\r\n    console.log(\"found user: \",foundUser);//user obj\r\n    \r\n    if (foundUser) {\r\n      setUser(foundUser);\r\n      localStorage.setItem(\"user\", JSON.stringify(foundUser));//JSON.stringify - obj to convert string because localstorage store data.\r\n      return true;\r\n    }\r\n    return false;\r\n  };\r\n\r\n  const signupUser = (email, password,name) => {\r\n    // console.log(\"Signup initiated with:\", email, password, name);\r\n    const users = JSON.parse(localStorage.getItem(\"users\")) || [];//[{}]\r\n    //  console.log(\" Existing users from localStorage:\", users);//{}\r\n    if (users.find(u => u.email === email)) {//userslist ma pela thi koi user hase jena email match thay to ta user pela thi register hase\r\n      // console.log(\"User already exists with this email:\", email);\r\n      return false;\r\n    } // userlist ma check kare k same email register cha to false\r\n    const newUser = { email, password,name };//{}\r\n    // console.log(\"Creating new user:\", newUser);\r\n    users.push(newUser);//userlist array [{}]\r\n    // console.log(\"Updated users array:\", users);\r\n    localStorage.setItem(\"users\", JSON.stringify(users));//whole user array to convert string and store localstorage \"users\"\r\n    // console.log(\"Stored updated users in localStorage\");\r\n    setUser(newUser);//new user login user set {}\r\n    // console.log(\"Set current user state:\", newUser);\r\n    localStorage.setItem(\"user\", JSON.stringify(newUser));//new user \"user\" key sathe store {}\r\n   //console.log(\"Saved current user in localStorage\");\r\n    // console.log(\"Signup successful!\");\r\n    return true;\r\n  };\r\n\r\n  const logoutUser = () => {\r\n    setUser(null);\r\n    localStorage.removeItem(\"user\");\r\n  };\r\n\r\n  const getCurrentUser = () => user;\r\n  console.log(\"getCurrentUser: \",getCurrentUser);\r\n  \r\n  return (\r\n    <AuthContext.Provider value={{ user, loginUser, signupUser, logoutUser, getCurrentUser,loading }}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\nexport { AuthContext };\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}