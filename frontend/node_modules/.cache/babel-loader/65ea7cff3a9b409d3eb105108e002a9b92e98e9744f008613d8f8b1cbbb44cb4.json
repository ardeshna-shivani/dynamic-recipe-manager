{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Shivani\\\\react recipe-project\\\\recipe-manager\\\\frontend\\\\src\\\\utils\\\\Auth.js\",\n  _s = $RefreshSig$();\n// import React, { createContext, useState, useEffect } from \"react\";\n\n//  const AuthContext = createContext();//create context\n\n// export const AuthProvider = ({ children }) => {\n//   const [user, setUser] = useState(null);\n//   const [loading, setLoading] = useState(true);\n\n//   // Load user from localStorage \n//   useEffect(() => {\n//     const savedUser = JSON.parse(localStorage.getItem(\"user\"));\n//     const token = localStorage.getItem(\"token\");\n\n//     if (savedUser && token) {\n//       try {\n//         const payload = JSON.parse(atob(token.split('.')[1]));\n//         if (payload.exp * 1000 < Date.now()) {\n//           logoutUser();\n//         } else {\n//           setUser(savedUser);\n//         }\n//       } catch {\n//         logoutUser();\n//       }\n//     }\n\n//     setLoading(false);\n//   }, []);\n\n//   // const loginUser = (email, password) => {\n//   //   const users = JSON.parse(localStorage.getItem(\"users\")) || [];\n//   //   console.log(\"users:\",users);//[{}]\n//   //   //JSON.parse - string na js obj ma convert, localStorage.getItem(\"users\") - \n//   //   // localstorage -> \"users\" name ne key ma rahela data lave , localstorage ma badhu string ma store thay.\n//   //   const foundUser = users.find(u => u.email === email && u.password === password);\n//   //   console.log(\"found user: \",foundUser);//user obj\n\n//   //   if (foundUser) {\n//   //     setUser(foundUser);\n//   //     localStorage.setItem(\"user\", JSON.stringify(foundUser));//JSON.stringify - obj to convert string because localstorage store data.\n//   //     return true;\n//   //   }\n//   //   return false;\n//   // };\n\n//   const loginUser = async (email, password) => {\n//     try {\n//       const response = await fetch(\"http://localhost:5000/api/login\", {\n//         method: \"POST\",\n//         headers: {\n//           \"Content-Type\": \"application/json\",\n//         },\n//         body: JSON.stringify({ email, password }),\n//       });\n\n//       if (!response.ok) return false;\n\n//       const data = await response.json();\n//       setUser(data.user);\n//       localStorage.setItem(\"user\", JSON.stringify(data.user));\n//        localStorage.setItem(\"token\", data.token); \n//       return true;\n//     } catch (error) {\n//       console.error(\"Login error:\", error);\n//       return false;\n//     }\n//   };\n\n//   // const signupUser = (email, password,name) => {\n//   //   // console.log(\"Signup initiated with:\", email, password, name);\n//   //   const users = JSON.parse(localStorage.getItem(\"users\")) || [];//[{}]\n//   //   //  console.log(\" Existing users from localStorage:\", users);//{}\n//   //   if (users.find(u => u.email === email)) {//userslist ma pela thi koi user hase jena email match thay to ta user pela thi register hase\n//   //     // console.log(\"User already exists with this email:\", email);\n//   //     return false;\n//   //   } // userlist ma check kare k same email register cha to false\n//   //   const newUser = { email, password,name };//{}\n//   //   // console.log(\"Creating new user:\", newUser);\n//   //   users.push(newUser);//userlist array [{}]\n//   //   // console.log(\"Updated users array:\", users);\n//   //   localStorage.setItem(\"users\", JSON.stringify(users));//whole user array to convert string and store localstorage \"users\"\n//   //   // console.log(\"Stored updated users in localStorage\");{}\n//   //   setUser(newUser);//new user login user set {}\n//   //   // console.log(\"Set current user state:\", newUser);\n//   //   localStorage.setItem(\"user\", JSON.stringify(newUser));//new user \"user\" key sathe store {}\n//   //  //console.log(\"Saved current user in localStorage\");\n//   //   // console.log(\"Signup successful!\");\n//   //   return true;\n//   // };\n\n//   const signupUser = async (email, password, name) => {\n//     try {\n//       const response = await fetch(\"http://localhost:5000/api/signup\", {\n//         method: \"POST\",\n//         headers: {\n//           \"Content-Type\": \"application/json\",\n//         },\n//         body: JSON.stringify({ email, password, name }),\n//       });\n\n//       if (!response.ok) return false;\n\n//       const data = await response.json();\n//       setUser(data.user);\n//       localStorage.setItem(\"user\", JSON.stringify(data.user));\n//       localStorage.setItem(\"token\", data.token);\n//       return true;\n//     } catch (error) {\n//       console.error(\"Signup error:\", error);\n//       return false;\n//     }\n//   };\n\n//   const logoutUser = () => {\n//     setUser(null);\n//     localStorage.removeItem(\"user\");\n//     localStorage.removeItem(\"token\");\n//     fetch(\"http://localhost:5000/api/logout\", {\n//     method: \"POST\",\n//   }).catch((err) => console.error(\"Logout request failed:\", err));\n//   };\n\n//   const getCurrentUser = () => user;//login user no {}\n//   // console.log(\"getCurrentUser: \",getCurrentUser());\n\n//   return (\n//     <AuthContext.Provider value={{ user, loginUser, signupUser, logoutUser, getCurrentUser,loading }}>\n//       {children}\n//     </AuthContext.Provider>\n//   );\n// };\n\n// export { AuthContext };\n\nimport React, { createContext, useState, useEffect } from \"react\";\nimport { useNavigate } from \"react-router-dom\"; // Import useNavigate\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AuthContext = /*#__PURE__*/createContext();\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(JSON.parse(localStorage.getItem(\"user\")) || null);\n  const [loading, setLoading] = useState(true);\n  const navigate = useNavigate(); // Hook for navigation\n\n  useEffect(() => {\n    const savedUser = JSON.parse(localStorage.getItem(\"user\"));\n    const token = localStorage.getItem(\"token\");\n    if (savedUser && token) {\n      try {\n        const payload = JSON.parse(atob(token.split('.')[1])); // Decode token to get payload\n        if (payload.exp * 1000 < Date.now()) {\n          logoutUser(); // Log out user if token expired\n          navigate(\"/login\"); // Redirect to login page\n        } else {\n          setUser(savedUser); // Set the user if the token is valid\n          scheduleAutoLogout(token);\n        }\n      } catch {\n        logoutUser(); // Log out user if token is invalid\n        navigate(\"/login\"); // Redirect to login page\n      }\n    } else {\n      setLoading(false); // If no user or token, set loading to false\n    }\n    setLoading(false); // Done with loading state\n  }, [navigate]); // Adding `navigate` as a dependency to ensure it is used correctly\n\n  const loginUser = async (email, password) => {\n    try {\n      const response = await fetch(`${process.env.REACT_APP_API}/login`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          email,\n          password\n        })\n      });\n      if (!response.ok) return false;\n      const data = await response.json();\n      setUser(data.user);\n      localStorage.setItem(\"user\", JSON.stringify(data.user));\n      localStorage.setItem(\"token\", data.token);\n      scheduleAutoLogout(data.token);\n      return true;\n    } catch (error) {\n      console.error(\"Login error:\", error);\n      return false;\n    }\n  };\n  const signupUser = async (email, password, name) => {\n    try {\n      const response = await fetch(`${process.env.REACT_APP_API}/signup`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          email,\n          password,\n          name\n        })\n      });\n      if (!response.ok) return false;\n      const data = await response.json();\n      setUser(data.user);\n      localStorage.setItem(\"user\", JSON.stringify(data.user));\n      localStorage.setItem(\"token\", data.token);\n      scheduleAutoLogout(data.token);\n      return true;\n    } catch (error) {\n      console.error(\"Signup error:\", error);\n      return false;\n    }\n  };\n  const logoutUser = () => {\n    setUser(null);\n    localStorage.removeItem(\"user\");\n    localStorage.removeItem(\"token\");\n    fetch(`${process.env.REACT_APP_API}/logout`, {\n      method: \"POST\"\n    }).catch(err => console.error(\"Logout request failed:\", err));\n    navigate(\"/login\"); // Redirect to login page after logout\n  };\n  const getCurrentUser = () => user;\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      user,\n      loginUser,\n      signupUser,\n      logoutUser,\n      getCurrentUser,\n      loading\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 230,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"NUQ0yj0mwriKNd6zezVvzhmkBOU=\", false, function () {\n  return [useNavigate];\n});\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","useNavigate","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","user","setUser","JSON","parse","localStorage","getItem","loading","setLoading","navigate","savedUser","token","payload","atob","split","exp","Date","now","logoutUser","scheduleAutoLogout","loginUser","email","password","response","fetch","process","env","REACT_APP_API","method","headers","body","stringify","ok","data","json","setItem","error","console","signupUser","name","removeItem","catch","err","getCurrentUser","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Shivani/react recipe-project/recipe-manager/frontend/src/utils/Auth.js"],"sourcesContent":["// import React, { createContext, useState, useEffect } from \"react\";\r\n\r\n//  const AuthContext = createContext();//create context\r\n\r\n// export const AuthProvider = ({ children }) => {\r\n//   const [user, setUser] = useState(null);\r\n//   const [loading, setLoading] = useState(true);\r\n\r\n//   // Load user from localStorage \r\n//   useEffect(() => {\r\n//     const savedUser = JSON.parse(localStorage.getItem(\"user\"));\r\n//     const token = localStorage.getItem(\"token\");\r\n\r\n//     if (savedUser && token) {\r\n//       try {\r\n//         const payload = JSON.parse(atob(token.split('.')[1]));\r\n//         if (payload.exp * 1000 < Date.now()) {\r\n//           logoutUser();\r\n//         } else {\r\n//           setUser(savedUser);\r\n//         }\r\n//       } catch {\r\n//         logoutUser();\r\n//       }\r\n//     }\r\n\r\n//     setLoading(false);\r\n//   }, []);\r\n\r\n//   // const loginUser = (email, password) => {\r\n//   //   const users = JSON.parse(localStorage.getItem(\"users\")) || [];\r\n//   //   console.log(\"users:\",users);//[{}]\r\n//   //   //JSON.parse - string na js obj ma convert, localStorage.getItem(\"users\") - \r\n//   //   // localstorage -> \"users\" name ne key ma rahela data lave , localstorage ma badhu string ma store thay.\r\n//   //   const foundUser = users.find(u => u.email === email && u.password === password);\r\n//   //   console.log(\"found user: \",foundUser);//user obj\r\n    \r\n//   //   if (foundUser) {\r\n//   //     setUser(foundUser);\r\n//   //     localStorage.setItem(\"user\", JSON.stringify(foundUser));//JSON.stringify - obj to convert string because localstorage store data.\r\n//   //     return true;\r\n//   //   }\r\n//   //   return false;\r\n//   // };\r\n\r\n//   const loginUser = async (email, password) => {\r\n//     try {\r\n//       const response = await fetch(\"http://localhost:5000/api/login\", {\r\n//         method: \"POST\",\r\n//         headers: {\r\n//           \"Content-Type\": \"application/json\",\r\n//         },\r\n//         body: JSON.stringify({ email, password }),\r\n//       });\r\n\r\n//       if (!response.ok) return false;\r\n\r\n//       const data = await response.json();\r\n//       setUser(data.user);\r\n//       localStorage.setItem(\"user\", JSON.stringify(data.user));\r\n//        localStorage.setItem(\"token\", data.token); \r\n//       return true;\r\n//     } catch (error) {\r\n//       console.error(\"Login error:\", error);\r\n//       return false;\r\n//     }\r\n//   };\r\n\r\n//   // const signupUser = (email, password,name) => {\r\n//   //   // console.log(\"Signup initiated with:\", email, password, name);\r\n//   //   const users = JSON.parse(localStorage.getItem(\"users\")) || [];//[{}]\r\n//   //   //  console.log(\" Existing users from localStorage:\", users);//{}\r\n//   //   if (users.find(u => u.email === email)) {//userslist ma pela thi koi user hase jena email match thay to ta user pela thi register hase\r\n//   //     // console.log(\"User already exists with this email:\", email);\r\n//   //     return false;\r\n//   //   } // userlist ma check kare k same email register cha to false\r\n//   //   const newUser = { email, password,name };//{}\r\n//   //   // console.log(\"Creating new user:\", newUser);\r\n//   //   users.push(newUser);//userlist array [{}]\r\n//   //   // console.log(\"Updated users array:\", users);\r\n//   //   localStorage.setItem(\"users\", JSON.stringify(users));//whole user array to convert string and store localstorage \"users\"\r\n//   //   // console.log(\"Stored updated users in localStorage\");{}\r\n//   //   setUser(newUser);//new user login user set {}\r\n//   //   // console.log(\"Set current user state:\", newUser);\r\n//   //   localStorage.setItem(\"user\", JSON.stringify(newUser));//new user \"user\" key sathe store {}\r\n//   //  //console.log(\"Saved current user in localStorage\");\r\n//   //   // console.log(\"Signup successful!\");\r\n//   //   return true;\r\n//   // };\r\n\r\n\r\n//   const signupUser = async (email, password, name) => {\r\n//     try {\r\n//       const response = await fetch(\"http://localhost:5000/api/signup\", {\r\n//         method: \"POST\",\r\n//         headers: {\r\n//           \"Content-Type\": \"application/json\",\r\n//         },\r\n//         body: JSON.stringify({ email, password, name }),\r\n//       });\r\n\r\n//       if (!response.ok) return false;\r\n\r\n//       const data = await response.json();\r\n//       setUser(data.user);\r\n//       localStorage.setItem(\"user\", JSON.stringify(data.user));\r\n//       localStorage.setItem(\"token\", data.token);\r\n//       return true;\r\n//     } catch (error) {\r\n//       console.error(\"Signup error:\", error);\r\n//       return false;\r\n//     }\r\n//   };\r\n\r\n//   const logoutUser = () => {\r\n//     setUser(null);\r\n//     localStorage.removeItem(\"user\");\r\n//     localStorage.removeItem(\"token\");\r\n//     fetch(\"http://localhost:5000/api/logout\", {\r\n//     method: \"POST\",\r\n//   }).catch((err) => console.error(\"Logout request failed:\", err));\r\n//   };\r\n\r\n//   const getCurrentUser = () => user;//login user no {}\r\n//   // console.log(\"getCurrentUser: \",getCurrentUser());\r\n  \r\n//   return (\r\n//     <AuthContext.Provider value={{ user, loginUser, signupUser, logoutUser, getCurrentUser,loading }}>\r\n//       {children}\r\n//     </AuthContext.Provider>\r\n//   );\r\n// };\r\n\r\n// export { AuthContext };\r\n\r\n\r\n\r\nimport React, { createContext, useState, useEffect } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\"; // Import useNavigate\r\n\r\nexport const AuthContext = createContext();\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [user, setUser] = useState(JSON.parse(localStorage.getItem(\"user\")) || null);\r\n  const [loading, setLoading] = useState(true);\r\n  const navigate = useNavigate(); // Hook for navigation\r\n\r\n  useEffect(() => {\r\n    const savedUser = JSON.parse(localStorage.getItem(\"user\"));\r\n    const token = localStorage.getItem(\"token\");\r\n\r\n    if (savedUser && token) {\r\n      try {\r\n        const payload = JSON.parse(atob(token.split('.')[1])); // Decode token to get payload\r\n        if (payload.exp * 1000 < Date.now()) {\r\n          logoutUser(); // Log out user if token expired\r\n          navigate(\"/login\"); // Redirect to login page\r\n        } else {\r\n          setUser(savedUser); // Set the user if the token is valid\r\n          scheduleAutoLogout(token);\r\n        }\r\n      } catch {\r\n        logoutUser(); // Log out user if token is invalid\r\n        navigate(\"/login\"); // Redirect to login page\r\n      }\r\n    } else {\r\n      setLoading(false); // If no user or token, set loading to false\r\n    }\r\n\r\n    setLoading(false); // Done with loading state\r\n  }, [navigate]); // Adding `navigate` as a dependency to ensure it is used correctly\r\n\r\n  const loginUser = async (email, password) => {\r\n    try {\r\n      const response = await fetch(`${process.env.REACT_APP_API}/login`, {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify({ email, password }),\r\n      });\r\n\r\n      if (!response.ok) return false;\r\n\r\n      const data = await response.json();\r\n      setUser(data.user);\r\n      localStorage.setItem(\"user\", JSON.stringify(data.user));\r\n      localStorage.setItem(\"token\", data.token);\r\n      scheduleAutoLogout(data.token);\r\n      return true;\r\n    } catch (error) {\r\n      console.error(\"Login error:\", error);\r\n      return false;\r\n    }\r\n  };\r\n\r\n  const signupUser = async (email, password, name) => {\r\n    try {\r\n      const response = await fetch(`${process.env.REACT_APP_API}/signup`, {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify({ email, password, name }),\r\n      });\r\n\r\n      if (!response.ok) return false;\r\n\r\n      const data = await response.json();\r\n      setUser(data.user);\r\n      localStorage.setItem(\"user\", JSON.stringify(data.user));\r\n      localStorage.setItem(\"token\", data.token);\r\n      scheduleAutoLogout(data.token);\r\n      return true;\r\n    } catch (error) {\r\n      console.error(\"Signup error:\", error);\r\n      return false;\r\n    }\r\n  };\r\n\r\n  const logoutUser = () => {\r\n    setUser(null);\r\n    localStorage.removeItem(\"user\");\r\n    localStorage.removeItem(\"token\");\r\n    fetch(`${process.env.REACT_APP_API}/logout`, { method: \"POST\" }).catch((err) =>\r\n      console.error(\"Logout request failed:\", err)\r\n    );\r\n    navigate(\"/login\"); // Redirect to login page after logout\r\n  };\r\n\r\n  const getCurrentUser = () => user;\r\n\r\n  return (\r\n    <AuthContext.Provider value={{ user, loginUser, signupUser, logoutUser, getCurrentUser, loading }}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}